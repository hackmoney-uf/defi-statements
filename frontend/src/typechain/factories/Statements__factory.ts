/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Statements, StatementsInterface } from "../Statements";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_appAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "requestor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "StatementRequest",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "requestInitiator",
        type: "address",
      },
    ],
    name: "allRequestsFor",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "from",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "to",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "processed",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "cid",
            type: "bytes",
          },
        ],
        internalType: "struct Statements.Request[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "appAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "baseFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "requestInitiator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "cid",
        type: "bytes",
      },
    ],
    name: "markProcessed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "multiplier",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "from",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "to",
        type: "uint256",
      },
    ],
    name: "requestStatement",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "requests",
    outputs: [
      {
        internalType: "uint256",
        name: "from",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "to",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "processed",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "cid",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "from",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "to",
        type: "uint256",
      },
    ],
    name: "requiredFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620014de380380620014de83398181016040528101906200003791906200012a565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f282620000c5565b9050919050565b6200010481620000e5565b81146200011057600080fd5b50565b6000815190506200012481620000f9565b92915050565b600060208284031215620001435762000142620000c0565b5b6000620001538482850162000113565b91505092915050565b611372806200016c6000396000f3fe6080604052600436106100915760003560e01c80638710661a116100595780638710661a146101695780638a6f4226146101a65780638da5cb5b146101c25780639ecebe2a146101ed578063e72132d71461022d57610091565b80631b3ed722146100965780631c3b7814146100c15780635a073ca6146100fe5780636ef25c3a14610127578063853828b614610152575b600080fd5b3480156100a257600080fd5b506100ab610258565b6040516100b89190610a7c565b60405180910390f35b3480156100cd57600080fd5b506100e860048036038101906100e39190610aff565b61025f565b6040516100f59190610d14565b60405180910390f35b34801561010a57600080fd5b5061012560048036038101906101209190610dc7565b6103bd565b005b34801561013357600080fd5b5061013c610539565b6040516101499190610a7c565b60405180910390f35b34801561015e57600080fd5b50610167610545565b005b34801561017557600080fd5b50610190600480360381019061018b9190610e3b565b6105b0565b60405161019d9190610a7c565b60405180910390f35b6101c060048036038101906101bb9190610e3b565b6105e7565b005b3480156101ce57600080fd5b506101d76107e2565b6040516101e49190610e8a565b60405180910390f35b3480156101f957600080fd5b50610214600480360381019061020f9190610ea5565b610808565b6040516102249493929190610f3e565b60405180910390f35b34801561023957600080fd5b506102426108ea565b60405161024f9190610e8a565b60405180910390f35b6298968081565b60606000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156103b2578382906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1615151515815260200160038201805461032190610fb9565b80601f016020809104026020016040519081016040528092919081815260200182805461034d90610fb9565b801561039a5780601f1061036f5761010080835404028352916020019161039a565b820191906000526020600020905b81548152906001019060200180831161037d57829003601f168201915b505050505081525050815260200190600101906102bf565b505050509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461044d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044490611047565b60405180910390fd5b60008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848154811061049f5761049e611067565b5b906000526020600020906004020190508060020160009054906101000a900460ff1615610501576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f8906110e2565b60405180910390fd5b60018160020160006101000a81548160ff0219169083151502179055508282826003019190610531929190610910565b505050505050565b67016345785d8a000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156105ad573d6000803e3d6000fd5b50565b60006298968083836105c29190611131565b6105cc9190611165565b67016345785d8a00006105df91906111bf565b905092915050565b808210610629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062090611287565b60405180910390fd5b61063382826105b0565b341015610675576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066c906112f3565b60405180910390fd5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905090506106c3610996565b838160000181815250508281602001818152505060008160400190151590811515815250506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000209060040201600090919091909150600082015181600001556020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555060608201518160030190805190602001906107a09291906109c0565b5050507faceb8d2c44d3717189bbb3ab6524fa0c31652725883788a5fc72e0f012b3b2cb33836040516107d4929190611313565b60405180910390a150505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000602052816000526040600020818154811061082457600080fd5b9060005260206000209060040201600091509150508060000154908060010154908060020160009054906101000a900460ff169080600301805461086790610fb9565b80601f016020809104026020016040519081016040528092919081815260200182805461089390610fb9565b80156108e05780601f106108b5576101008083540402835291602001916108e0565b820191906000526020600020905b8154815290600101906020018083116108c357829003601f168201915b5050505050905084565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b82805461091c90610fb9565b90600052602060002090601f01602090048101928261093e5760008555610985565b82601f1061095757803560ff1916838001178555610985565b82800160010185558215610985579182015b82811115610984578235825591602001919060010190610969565b5b5090506109929190610a46565b5090565b60405180608001604052806000815260200160008152602001600015158152602001606081525090565b8280546109cc90610fb9565b90600052602060002090601f0160209004810192826109ee5760008555610a35565b82601f10610a0757805160ff1916838001178555610a35565b82800160010185558215610a35579182015b82811115610a34578251825591602001919060010190610a19565b5b509050610a429190610a46565b5090565b5b80821115610a5f576000816000905550600101610a47565b5090565b6000819050919050565b610a7681610a63565b82525050565b6000602082019050610a916000830184610a6d565b92915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610acc82610aa1565b9050919050565b610adc81610ac1565b8114610ae757600080fd5b50565b600081359050610af981610ad3565b92915050565b600060208284031215610b1557610b14610a97565b5b6000610b2384828501610aea565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610b6181610a63565b82525050565b60008115159050919050565b610b7c81610b67565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610bbc578082015181840152602081019050610ba1565b83811115610bcb576000848401525b50505050565b6000601f19601f8301169050919050565b6000610bed82610b82565b610bf78185610b8d565b9350610c07818560208601610b9e565b610c1081610bd1565b840191505092915050565b6000608083016000830151610c336000860182610b58565b506020830151610c466020860182610b58565b506040830151610c596040860182610b73565b5060608301518482036060860152610c718282610be2565b9150508091505092915050565b6000610c8a8383610c1b565b905092915050565b6000602082019050919050565b6000610caa82610b2c565b610cb48185610b37565b935083602082028501610cc685610b48565b8060005b85811015610d025784840389528151610ce38582610c7e565b9450610cee83610c92565b925060208a01995050600181019050610cca565b50829750879550505050505092915050565b60006020820190508181036000830152610d2e8184610c9f565b905092915050565b610d3f81610a63565b8114610d4a57600080fd5b50565b600081359050610d5c81610d36565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610d8757610d86610d62565b5b8235905067ffffffffffffffff811115610da457610da3610d67565b5b602083019150836001820283011115610dc057610dbf610d6c565b5b9250929050565b60008060008060608587031215610de157610de0610a97565b5b6000610def87828801610aea565b9450506020610e0087828801610d4d565b935050604085013567ffffffffffffffff811115610e2157610e20610a9c565b5b610e2d87828801610d71565b925092505092959194509250565b60008060408385031215610e5257610e51610a97565b5b6000610e6085828601610d4d565b9250506020610e7185828601610d4d565b9150509250929050565b610e8481610ac1565b82525050565b6000602082019050610e9f6000830184610e7b565b92915050565b60008060408385031215610ebc57610ebb610a97565b5b6000610eca85828601610aea565b9250506020610edb85828601610d4d565b9150509250929050565b610eee81610b67565b82525050565b600082825260208201905092915050565b6000610f1082610b82565b610f1a8185610ef4565b9350610f2a818560208601610b9e565b610f3381610bd1565b840191505092915050565b6000608082019050610f536000830187610a6d565b610f606020830186610a6d565b610f6d6040830185610ee5565b8181036060830152610f7f8184610f05565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610fd157607f821691505b602082108103610fe457610fe3610f8a565b5b50919050565b600082825260208201905092915050565b7f63616c6c6572206973206e6f7420616e20617070000000000000000000000000600082015250565b6000611031601483610fea565b915061103c82610ffb565b602082019050919050565b6000602082019050818103600083015261106081611024565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f63616e27742070726f6365737320726571756573742074776963650000000000600082015250565b60006110cc601b83610fea565b91506110d782611096565b602082019050919050565b600060208201905081810360008301526110fb816110bf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061113c82610a63565b915061114783610a63565b92508282101561115a57611159611102565b5b828203905092915050565b600061117082610a63565b915061117b83610a63565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156111b4576111b3611102565b5b828202905092915050565b60006111ca82610a63565b91506111d583610a63565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561120a57611209611102565b5b828201905092915050565b7f2766726f6d272074696d657374616d702069732067726561746572207468656e60008201527f2027746f272074696d657374616d700000000000000000000000000000000000602082015250565b6000611271602f83610fea565b915061127c82611215565b604082019050919050565b600060208201905081810360008301526112a081611264565b9050919050565b7f7061796d656e7420697320746f6f206c6f770000000000000000000000000000600082015250565b60006112dd601283610fea565b91506112e8826112a7565b602082019050919050565b6000602082019050818103600083015261130c816112d0565b9050919050565b60006040820190506113286000830185610e7b565b6113356020830184610a6d565b939250505056fea26469706673582212201e80e5bb9bf72a7bbb880f8a2520eed81305cb0372f5587b19acdbd26a27f68964736f6c634300080d0033";

export class Statements__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _appAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Statements> {
    return super.deploy(_appAddress, overrides || {}) as Promise<Statements>;
  }
  getDeployTransaction(
    _appAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_appAddress, overrides || {});
  }
  attach(address: string): Statements {
    return super.attach(address) as Statements;
  }
  connect(signer: Signer): Statements__factory {
    return super.connect(signer) as Statements__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StatementsInterface {
    return new utils.Interface(_abi) as StatementsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Statements {
    return new Contract(address, _abi, signerOrProvider) as Statements;
  }
}
